#!/bin/bash
set -e

usage() {
	echo "git pr <show|list|log|cherry-pick|fetch> ..."
	exit $1
}

case "$1" in
--help|-h|--usage|-\?)
	usage 0
	;;
esac

if [ $# -lt 1 ]; then
	usage 1 1>&2
fi

cmd=$1 && shift

remote=""
pr=""
declare -a list
while [ $# -ge 1 ]; do
	case $1 in
	--help|-h|--usage|-\?)
		usage 0
		;;
	--remote=*)
		remote=${1#--remote=} && shift
		continue
		;;
	--remote)
		[ $# -ge 2 ] && remote=$2 && shift 2
		continue
		;;
	--pr=*)
		pr=${1#--pr=} && shift
		continue
		;;
	--pr)
		[ $# -ge 2 ] && pr=$2 && shift 2
		continue
		;;
	*)
		list[${#list[*]}]=$1
		;;
	esac
	shift
done
eval set -- "${list[$@]}"

if [ -z $pr ]; then
	pr=${1} && shift
fi
pr=${pr#pr/}
upstream_name=$(git config --get vathpela.toys.upstream) || upstream_name=upstream
if [ -z $remote ]; then
	remote=${1:-${upstream_name}}
	shift >/dev/null 2>&1 || :
fi

case "$cmd" in
fetch)
	cmd=fetch-pr
	;;
merge|rebase|reset)
	exec git $cmd refs/remotes/${remote}/pr/${pr}
	;;
help)
	[ $# -lt 1 ] && echo zonk && usage 0 || :
	exec git-${1}-pr --help
	;;
*)
	merge=""
	if [ -f ".git/refs/remotes/${remote}/pr-merge/${pr}" ]; then
		merge="refs/remotes/${remote}/pr-merge/${pr}^"
	fi
	revs=$(eval git rev-parse --sq --revs-only --no-flags --default HEAD "${merge}..refs/remotes/${remote}/pr/${pr}")
	eval exec git "$cmd" $revs
	;;
esac

for x in "$@" ; do
	case "$x" in
	--help|-h|--usage|-\?)
		exec git-${cmd} --help
		;;
	esac
done

exec git ${cmd} --remote "$remote" --pr "$pr" "$@"
